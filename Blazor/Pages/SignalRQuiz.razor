@page "/signalr-quiz"
@inject IJSRuntime JS

<PageTitle>SignalR Quiz</PageTitle>

<link href="css/jwt-learn.css" rel="stylesheet" />

<div class="jwt-page">
  <h1>SignalR Quiz — Real-time коммуникации</h1>
  <p>
    Тестируй знания по SignalR — технологии для двунаправленной коммуникации между клиентом и сервером в реальном времени.
  </p>

  <div class="toc">
    <b>Разделы:</b>
    <a @onclick="@(() => ScrollToSection("basics"))" style="cursor: pointer;">Основы SignalR</a>
    <a @onclick="@(() => ScrollToSection("hubs"))" style="cursor: pointer;">Hubs и методы</a>
    <a @onclick="@(() => ScrollToSection("groups"))" style="cursor: pointer;">Группы и broadcast</a>
    <a @onclick="@(() => ScrollToSection("auth"))" style="cursor: pointer;">Аутентификация</a>
    <a @onclick="@(() => ScrollToSection("quiz"))" style="cursor: pointer;">Финальный квиз</a>
  </div>

  <h2 id="basics">Основы SignalR</h2>
  <p>SignalR — библиотека для добавления real-time функциональности в веб-приложения.</p>
  <ul>
    <li>WebSockets, Server-Sent Events, Long Polling — автоматический выбор</li>
    <li>Двунаправленная коммуникация клиент ↔ сервер</li>
    <li>Поддержка масштабирования через Redis, Azure SignalR Service</li>
  </ul>

  <h2 id="hubs">Hubs и методы</h2>
  <p>Hub — центральный класс для обмена сообщениями.</p>
  <ul>
    <li>Наследуется от <code>Hub</code> или <code>Hub&lt;T&gt;</code></li>
    <li>Методы Hub вызываются с клиента</li>
    <li><code>Clients.All</code>, <code>Clients.Caller</code>, <code>Clients.Others</code></li>
  </ul>

  <h2 id="groups">Группы и broadcast</h2>
  <p>Организация клиентов в группы для таргетированной отправки.</p>
  <ul>
    <li><code>Groups.AddToGroupAsync()</code> — добавить в группу</li>
    <li><code>Clients.Group("groupName")</code> — отправить группе</li>
    <li>Полезно для чатов, уведомлений по комнатам</li>
  </ul>

  <h2 id="auth">Аутентификация в SignalR</h2>
  <p>Защита Hub endpoints.</p>
  <ul>
    <li><code>[Authorize]</code> атрибут на Hub</li>
    <li>JWT токен передается через query string</li>
    <li><code>Context.User</code> — доступ к данным пользователя</li>
  </ul>

  <h2 id="quiz">Финальный квиз</h2>
  <p>Покажи свои знания SignalR!</p>
  <div class="quiz">
    @for (int i = 0; i < _questions.Count; i++)
    {
        var questionIndex = i;
        var q = _questions[questionIndex];
        <div class="q">
          <div class="qtext"><b>@(questionIndex+1).</b> @q.Text</div>
          <div class="opts">
            @for (int j = 0; j < q.Options.Count; j++)
            {
                var optionIndex = j;
                var opt = q.Options[optionIndex];
                var chosen = q.SelectedIndex == optionIndex;
                var cls = q.Answered
                    ? (optionIndex == q.CorrectIndex ? "opt correct" : (chosen ? "opt wrong" : "opt"))
                    : (chosen ? "opt chosen" : "opt");
                <button class="@cls" type="button" @onclick="@(() => SelectAnswer(questionIndex, optionIndex))" disabled="@q.Answered">@opt</button>
            }
          </div>
          @if (q.Answered)
          {
            var isCorrect = q.SelectedIndex == q.CorrectIndex;
            <div class="feedback @(isCorrect ? "correct" : "wrong")">
                @(isCorrect ? "Верно! ✓" : "Неверно. ✗")
            </div>
            @if (!string.IsNullOrWhiteSpace(q.Explanation))
            {
              <div class="explain"><b>Объяснение:</b> @q.Explanation</div>
            }
          }
        </div>
    }
    <div class="quiz-actions">
      <button class="btn" type="button" @onclick="ShowScore">Показать результат</button>
      <button class="btn ghost" type="button" @onclick="ResetQuiz">Сбросить</button>
    </div>
    @if (_scoreVisible)
    {
      <div class="score">Результат: <b>@CorrectCount</b> из <b>@_questions.Count</b> — @(ScoreComment)</div>
    }
  </div>

  <div class="nav-buttons">
    <a href="/" class="btn">На главную</a>
  </div>
</div>

@code {
  private async Task ScrollToSection(string sectionId)
  {
      try
      {
          await JS.InvokeVoidAsync("eval", $"document.getElementById('{sectionId}')?.scrollIntoView({{ behavior: 'smooth', block: 'start' }});");
      }
      catch (Exception ex)
      {
          Console.WriteLine($"[SCROLL] Error: {ex.Message}");
      }
  }

  class QuizQuestion
  {
      public string Text { get; set; } = string.Empty;
      public List<string> Options { get; set; } = new();
      public int CorrectIndex { get; set; }
      public string? Explanation { get; set; }
      public int? SelectedIndex { get; set; }
      public bool Answered { get; set; }
  }

  private List<QuizQuestion> _questions = new();
  private bool _scoreVisible;
  
  int CorrectCount => _questions.Count(q => q.Answered && q.SelectedIndex == q.CorrectIndex);
  string ScoreComment => CorrectCount switch
  {
      >= 8 => "SignalR эксперт! ⚡",
      >= 6 => "Отлично! 👍",
      >= 4 => "Хорошо! 🙂",
      _ => "Повтори материал 📚"
  };

  void SelectAnswer(int qi, int oi)
  {
      if (qi < 0 || qi >= _questions.Count) return;
      var q = _questions[qi];
      if (oi < 0 || oi >= q.Options.Count) return;
      q.SelectedIndex = oi;
      q.Answered = true;
      StateHasChanged();
  }

  void ShowScore()
  {
      _scoreVisible = true;
      StateHasChanged();
  }

  void ResetQuiz()
  {
      foreach (var q in _questions)
      {
          q.SelectedIndex = null;
          q.Answered = false;
      }
      _scoreVisible = false;
      StateHasChanged();
  }

  protected override void OnInitialized()
  {
      if (_questions.Count == 0)
      {
          _questions = BuildQuestions();
      }
  }

  List<QuizQuestion> BuildQuestions()
  {
      return new List<QuizQuestion>
      {
          Q("От какого класса наследуется SignalR Hub?",
            new[]{"Hub или Hub<T>", "Controller", "MiddlewareBase"}, 0,
            "Hub — базовый класс для создания SignalR хабов."),
          
          Q("Какой транспорт предпочтительнее для SignalR?",
            new[]{"WebSockets", "Long Polling", "Server-Sent Events"}, 0,
            "WebSockets обеспечивают самую низкую задержку и двунаправленную связь."),
          
          Q("Как отправить сообщение всем клиентам?",
            new[]{"Clients.All.SendAsync()", "Clients.Send()", "Broadcast.All()"}, 0,
            "Clients.All отправляет сообщение всем подключенным клиентам."),
          
          Q("Как передать JWT токен в SignalR?",
            new[]{"Через query string в URL подключения", "В HTTP заголовке", "В теле сообщения"}, 0,
            "WebSocket API не поддерживает кастомные заголовки, поэтому токен передается в query string."),
          
          Q("Что такое ConnectionId?",
            new[]{"Уникальный ID подключения клиента", "ID пользователя", "ID группы"}, 0,
            "Каждое подключение получает уникальный ConnectionId."),
          
          Q("Как добавить клиента в группу?",
            new[]{"Groups.AddToGroupAsync()", "Clients.AddGroup()", "Hub.JoinGroup()"}, 0,
            "Groups.AddToGroupAsync добавляет текущее подключение в указанную группу."),
          
          Q("Что делает Clients.Caller?",
            new[]{"Отправляет только вызывающему клиенту", "Отправляет всем", "Отправляет кроме вызывающего"}, 0,
            "Clients.Caller отправляет сообщение только тому клиенту, который вызвал метод."),
          
          Q("Можно ли использовать [Authorize] на Hub?",
            new[]{"Да, для защиты всех методов Hub", "Нет, только на контроллерах", "Да, но бесполезно"}, 0,
            "[Authorize] на Hub классе защищает все методы от неавторизованного доступа."),
      };
  }

  static QuizQuestion Q(string text, string[] options, int correct, string? explanation = null)
  {
      return new QuizQuestion
      {
          Text = text,
          Options = options.ToList(),
          CorrectIndex = correct,
          Explanation = explanation
      };
  }
}

