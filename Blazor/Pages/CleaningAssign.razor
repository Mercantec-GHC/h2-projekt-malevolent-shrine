@page "/assign-cleaning"
@inject IJSRuntime JS
@inject Blazor.Services.APIService Api
@using DomainModels.DTOs

<h4>Назначить задание уборщику</h4>

@if (error != null)
{
    <div class="alert alert-danger">@error</div>
}
@if (success != null)
{
    <div class="alert alert-success">@success</div>
}

@if (!loaded)
{
    <div>Загрузка...</div>
}
else
{
    <EditForm Model="model" OnValidSubmit="AssignAsync">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label class="form-label">Уборщик (Rengøring)</label>
            <select class="form-select" @bind="model.AssignedToUserId">
                <option value="0">— выберите уборщика —</option>
                @foreach (var c in cleaners)
                {
                    <option value="@c.Id">@c.FirstName @c.LastName (@c.Email)</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label">Заголовок</label>
            <input class="form-control" @bind="model.Title" placeholder="Например: Уборка комнаты 213" />
        </div>
        <div class="mb-3">
            <label class="form-label">Описание (список работ)</label>
            <textarea class="form-control" rows="4" @bind="model.Description" placeholder="Пылесос, сменить белье, вытереть пыль..."></textarea>
        </div>
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">ID комнаты (необязательно)</label>
                <input class="form-control" type="number" @bind="roomIdInput" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Срок (необязательно)</label>
                <input class="form-control" type="date" @bind="dueDateInput" />
            </div>
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" type="submit" disabled="@(busy)">Назначить</button>
        </div>
    </EditForm>
}

@code {
    private List<UserReadDto> cleaners = new();
    private bool loaded = false;
    private bool busy = false;
    private string? error;
    private string? success;

    private Blazor.Services.APIService.CleaningTaskCreateDto model = new();
    private int? roomIdInput;
    private DateTime? dueDateInput;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");
        if (string.IsNullOrWhiteSpace(token)) { error = "Требуется вход"; return; }
        try
        {
            cleaners = await Api.GetUsersByRoleAsync("Rengøring", token);
        }
        catch (Exception ex)
        {
            error = "Не удалось загрузить уборщиков: " + ex.Message;
        }
        finally
        {
            loaded = true;
        }
    }

    private async Task AssignAsync()
    {
        error = success = null;
        busy = true;
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");
            if (string.IsNullOrWhiteSpace(token)) { error = "Требуется вход"; return; }

            model.RoomId = roomIdInput;
            model.DueDate = dueDateInput;
            if (model.AssignedToUserId <= 0) { error = "Выберите уборщика"; return; }
            if (string.IsNullOrWhiteSpace(model.Title)) { error = "Заполните заголовок"; return; }

            var ok = await Api.CreateCleaningTaskAsync(model, token);
            if (ok)
            {
                success = "Задание отправлено";
                model = new(); roomIdInput = null; dueDateInput = null;
            }
            else
            {
                error = "Не удалось создать задание";
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally { busy = false; }
    }
}
