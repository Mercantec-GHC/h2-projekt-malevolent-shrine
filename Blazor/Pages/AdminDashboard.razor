@page "/admin-dashboard"
@using Blazor.Models
@using Blazor.Services
@inject ActiveDirectoryService ADService
@inject APIService Api

<div class="hero">
    <h1 class="site-title jp">MALEVOLENT SHRINE</h1>
    <div class="jp">領域展開 — Domain of Infinite Void</div>
    <p class="site-sub">⛩️ Admin Control Panel — Manipulate the cursed energy ⛩️</p>
</div>

<!-- Декоративная анимация в стиле "проклятой печати" -->
<div style="position:fixed; right:20px; top:80px; width:140px; opacity:.6; pointer-events:none; z-index:1;">
  <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
    <defs>
      <radialGradient id="cg" cx="50%" cy="50%" r="50%">
        <stop offset="0%" stop-color="#ff4d4d" stop-opacity="1"/>
        <stop offset="100%" stop-color="#7a0000" stop-opacity="0.1"/>
      </radialGradient>
    </defs>
    <circle cx="60" cy="60" r="40" fill="url(#cg)"/>
    <g stroke="#c92a2a" stroke-width="2" fill="none">
      <circle cx="60" cy="60" r="46">
        <animateTransform attributeName="transform" type="rotate" from="0 60 60" to="360 60 60" dur="8s" repeatCount="indefinite"/>
      </circle>
      <circle cx="60" cy="60" r="32">
        <animateTransform attributeName="transform" type="rotate" from="360 60 60" to="0 60 60" dur="6s" repeatCount="indefinite"/>
      </circle>
      <path d="M60 18 l6 10 l-12 0 z">
        <animateTransform attributeName="transform" type="rotate" from="0 60 60" to="360 60 60" dur="4s" repeatCount="indefinite"/>
      </path>
    </g>
  </svg>
</div>

<div class="container admin-shrine">
  <div class="actions">
    <a class="btn btn-red" href="/tickets/me">🎫 My Tickets</a>
    <a class="btn btn-ghost" href="/tickets/role">👥 Role Tickets</a>
  </div>

  <!-- AD Connection Card -->
  <div class="malevolent-card">
    <div class="card-ornament"></div>
    <h3 class="card-title">🌐 Active Directory Connection</h3>
    <div class="admin-section">
      <button class="btn btn-red" @onclick="TestConnection" disabled="@isLoading">
        @if (isLoading) { <span>⏳</span> } else { <span>🔌</span> }
        Test AD Connection
      </button>
    </div>
    @if (!string.IsNullOrEmpty(connectionStatus))
    {
      <div class="status-message @(connectionStatusOk ? "status-success" : "status-error")">
        @(connectionStatusOk ? "✅" : "❌") @connectionStatus
      </div>
    }
  </div>

  <!-- Users Card -->
  <div class="malevolent-card">
    <div class="card-ornament"></div>
    <h3 class="card-title">👤 Sorcerer Registry (Users)</h3>
    
    <div class="admin-section">
      <div class="search-bar">
        <input @bind="userSearch" 
               @onkeypress="OnSearchKeyPress" 
               placeholder="🔍 Search for sorcerer..." 
               class="admin-input" />
      </div>
      
      <div class="actions" style="margin-top: 12px;">
        <button class="btn btn-ghost" @onclick="LoadUsers" disabled="@isLoading">
          🔄 Reload All
        </button>
        <button class="btn btn-red" @onclick="SearchUsers" disabled="@(isLoading || string.IsNullOrWhiteSpace(userSearch))">
          🔎 Search
        </button>
      </div>
    </div>

    @if (isLoading && users == null)
    {
      <Skeleton Lines="6" LineHeight="20px" />
    }
    else if (users?.Count == 0)
    {
      <div class="empty-shrine">
        <div class="shrine-icon">🏮</div>
        <p>No sorcerers found in the registry.</p>
      </div>
    }
    else if (users != null)
    {
      <div class="admin-table-wrap">
        <table class="admin-table">
          <thead>
            <tr>
              <th>👤 Name</th>
              <th>🔑 Login</th>
              <th>📧 Email</th>
              <th>🏢 Department</th>
              <th>💼 Title</th>
              <th>🏛️ Company</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var user in users)
            {
              <tr>
                <td>@(string.IsNullOrEmpty(user.Name) ? user.DisplayName : user.Name)</td>
                <td><code>@user.Username</code></td>
                <td>@user.Email</td>
                <td>@user.Department</td>
                <td>@user.Title</td>
                <td>@user.Company</td>
              </tr>
            }
          </tbody>
        </table>
        <div class="table-footer">📊 Total: @users.Count sorcerers</div>
      </div>
    }
  </div>

  <!-- Groups Card -->
  <div class="malevolent-card">
    <div class="card-ornament"></div>
    <h3 class="card-title">⛩️ Cursed Groups (Roles)</h3>
    
    <div class="actions">
      <button class="btn btn-ghost" @onclick="LoadGroups" disabled="@isLoading">
        🔄 Reload Groups
      </button>
    </div>

    @if (isLoading && groups == null)
    {
      <Skeleton Lines="5" LineHeight="18px" />
    }
    else if (FilteredGroups?.Count() == 0)
    {
      <div class="empty-shrine">
        <div class="shrine-icon">⛩️</div>
        <p>No cursed groups detected.</p>
      </div>
    }
    else if (FilteredGroups != null)
    {
      <div class="admin-table-wrap">
        <table class="admin-table">
          <thead>
            <tr>
              <th>⛩️ Group Name</th>
              <th>📝 Description</th>
              <th>👥 Members</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var group in FilteredGroups)
            {
              <tr>
                <td><strong>@group.Name</strong></td>
                <td>@(string.IsNullOrEmpty(group.Description) ? "—" : group.Description)</td>
                <td><span class="member-badge">@group.Members.Count</span></td>
              </tr>
            }
          </tbody>
        </table>
        <div class="table-footer">📊 Total: @groups?.Count groups (@FilteredGroups.Count() allowed)</div>
      </div>
    }
  </div>
</div>

@code {
    private List<ADUser>? users = null;
    private List<ADGroup>? groups = null;
    private string userSearch = string.Empty;
    private string connectionStatus = string.Empty;
    private bool connectionStatusOk = false;
    private bool isLoading = false;

    private readonly HashSet<string> allowedGroups = new()
    {
        "Hotel_Admins","Hotel_Managers","Hotel_Receptionists","Hotel_Rengøring","Hotel_Kunde","Hotel_InfiniteVoid"
    };

    private IEnumerable<ADGroup> FilteredGroups => groups?.Where(g => allowedGroups.Contains(g.Name)) ?? Enumerable.Empty<ADGroup>();

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        isLoading = true;
        StateHasChanged();
        await Task.WhenAll(LoadUsers(), LoadGroups());
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadUsers()
    {
        try { users = await ADService.GetAllUsersAsync(); }
        catch (Exception ex)
        {
            users = new List<ADUser>();
            connectionStatus = $"Ошибка загрузки пользователей: {ex.Message}";
            connectionStatusOk = false;
        }
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(userSearch)) return;
        isLoading = true; StateHasChanged();
        try
        {
            users = await ADService.SearchUsersAsync(userSearch);
            connectionStatus = $"Поиск завершен. Найдено пользователей: {users.Count}";
            connectionStatusOk = true;
        }
        catch (Exception ex)
        {
            users = new List<ADUser>();
            connectionStatus = $"Ошибка поиска: {ex.Message}";
            connectionStatusOk = false;
        }
        isLoading = false; StateHasChanged();
    }

    private async Task LoadGroups()
    {
        try { groups = await ADService.GetAllGroupsAsync(); }
        catch (Exception ex)
        {
            groups = new List<ADGroup>();
            connectionStatus = $"Ошибка загрузки групп: {ex.Message}";
            connectionStatusOk = false;
        }
    }

    private async Task TestConnection()
    {
        isLoading = true; connectionStatus = string.Empty; StateHasChanged();
        var (success, message) = await ADService.TestConnectionAsync();
        connectionStatus = message; connectionStatusOk = success;
        isLoading = false; StateHasChanged();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(userSearch))
            await SearchUsers();
    }
}
