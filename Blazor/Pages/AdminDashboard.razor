@page "/admin-dashboard"
@using Blazor.Models
@using Blazor.Services
@inject ActiveDirectoryService ADService
@inject APIService Api
@inject TicketHubClient Hub

<h1 class="site-title jp">Malevolent Shrine</h1>
<div class="jp">Ryomen Sukuna</div>
<p class="site-sub">Admin Panel</p>

<!-- Декоративная анимация в стиле "проклятой печати" -->
<div style="position:absolute; right:20px; top:20px; width:120px; opacity:.8; pointer-events:none">
  <svg viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg">
    <defs>
      <radialGradient id="cg" cx="50%" cy="50%" r="50%">
        <stop offset="0%" stop-color="#ff4d4d" stop-opacity="1"/>
        <stop offset="100%" stop-color="#7a0000" stop-opacity="0.1"/>
      </radialGradient>
    </defs>
    <circle cx="60" cy="60" r="40" fill="url(#cg)"/>
    <g stroke="#c92a2a" stroke-width="2" fill="none">
      <circle cx="60" cy="60" r="46">
        <animateTransform attributeName="transform" type="rotate" from="0 60 60" to="360 60 60" dur="8s" repeatCount="indefinite"/>
      </circle>
      <circle cx="60" cy="60" r="32">
        <animateTransform attributeName="transform" type="rotate" from="360 60 60" to="0 60 60" dur="6s" repeatCount="indefinite"/>
      </circle>
      <path d="M60 18 l6 10 l-12 0 z">
        <animateTransform attributeName="transform" type="rotate" from="0 60 60" to="360 60 60" dur="4s" repeatCount="indefinite"/>
      </path>
    </g>
  </svg>
</div>

<div class="test-root">
  <div class="actions">
    <a class="btn btn-ghost" href="/tickets/me">My Ticket</a>
    <a class="btn btn-ghost" href="/tickets/role">Ticket for my role</a>
  </div>

  <div class="book-card">
    <h3 class="page-title">Active Directory</h3>
    <div class="profile-row">
      <button class="btn btn-red" @onclick="TestConnection" disabled="@isLoading">
        @if (isLoading) { <span class="spinner-border spinner-border-sm me-2" aria-hidden="true"></span> }
       Checking conection with AD
      </button>
    </div>
    @if (!string.IsNullOrEmpty(connectionStatus))
    {
      <div class="alert @(connectionStatusOk ? "alert-success" : "alert-danger") mt-2">
        @connectionStatus
      </div>
    }
  </div>

  <div class="book-card">
    <h3 class="page-title">Пользователи</h3>
    <div class="profile-row">
      <input @bind="userSearch" @onkeypress="OnSearchKeyPress" placeholder="Поиск пользователя..." class="form-control" />
    </div>
    <div class="actions">
      <button class="btn btn-ghost" @onclick="LoadUsers" disabled="@isLoading">Обновить список</button>
      <button class="btn btn-red" @onclick="SearchUsers" disabled="@(isLoading || string.IsNullOrWhiteSpace(userSearch))">Поиск</button>
    </div>

    @if (isLoading && users == null)
    {
      <div class="loading">Загрузка пользователей...</div>
    }
    else if (users?.Count == 0)
    {
      <div class="empty">Нет пользователей для отображения</div>
    }
    else if (users != null)
    {
      <div class="table-responsive">
        <table class="table table-bordered table-striped">
          <thead class="table-dark">
            <tr>
              <th>Name</th>
              <th>Login</th>
              <th>Email</th>
              <th>Department</th>
              <th>Job Title</th>
              <th>Company</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var user in users)
            {
              <tr>
                <td>@(string.IsNullOrEmpty(user.Name) ? user.DisplayName : user.Name)</td>
                <td>@user.Username</td>
                <td>@user.Email</td>
                <td>@user.Department</td>
                <td>@user.Title</td>
                <td>@user.Company</td>
              </tr>
            }
          </tbody>
        </table>
        <div class="mt-2"><small class="text-muted">Найдено пользователей: @users.Count</small></div>
      </div>
    }
  </div>

  <div class="book-card">
    <h3 class="page-title">Группы (разрешённые)</h3>
    <div class="actions">
      <button class="btn btn-ghost" @onclick="LoadGroups" disabled="@isLoading">Обновить список групп</button>
    </div>

    @if (isLoading && groups == null)
    {
      <div class="loading">Загрузка групп...</div>
    }
    else if (FilteredGroups?.Count() == 0)
    {
      <div class="empty">Нет групп для отображения</div>
    }
    else if (FilteredGroups != null)
    {
      <div class="table-responsive">
        <table class="table table-bordered table-striped">
          <thead class="table-dark">
            <tr>
              <th>Имя группы</th>
              <th>Описание</th>
              <th>Количество участников</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var group in FilteredGroups)
            {
              <tr>
                <td>@group.Name</td>
                <td>@(string.IsNullOrEmpty(group.Description) ? "Нет описания" : group.Description)</td>
                <td>@group.Members.Count</td>
              </tr>
            }
          </tbody>
        </table>
        <div class="mt-2"><small class="text-muted">Найдено групп: @groups?.Count</small></div>
      </div>
    }
  </div>
</div>

<!-- Тосты админке: появляется в правом верхнем углу -->
<div class="ms-toasts">
  @foreach (var t in _toasts)
  {
    <div class="ms-toast @t.Level">
      <div class="ms-toast-title">@t.Title</div>
      <div class="ms-toast-msg">@t.Message</div>
    </div>
  }
</div>

@code {
    private List<ADUser>? users = null;
    private List<ADGroup>? groups = null;
    private string userSearch = string.Empty;
    private string connectionStatus = string.Empty;
    private bool connectionStatusOk = false;
    private bool isLoading = false;

    private readonly HashSet<string> allowedGroups = new()
    {
        "Hotel_Admins","Hotel_Managers","Hotel_Receptionists","Hotel_Rengøring","Hotel_Kunde","Hotel_InfiniteVoid"
    };

    private IEnumerable<ADGroup> FilteredGroups => groups?.Where(g => allowedGroups.Contains(g.Name)) ?? Enumerable.Empty<ADGroup>();

    private readonly List<ToastPayload> _toasts = new();

    protected override async Task OnInitializedAsync()
    {
        // Подключаемся к SignalR, чтобы ловить тосты для админов/менеджеров
        try
        {
            if (!Hub.IsConnected)
            {
                await Hub.StartAsync(Api.GetBaseAddress());
            }
            Hub.OnToast += async payload =>
            {
                _toasts.Add(payload);
                StateHasChanged();
                // Автоматическое скрытие через 5 секунд
                _ = Task.Run(async () =>
                {
                    await Task.Delay(5000);
                    _toasts.Remove(payload);
                    await InvokeAsync(StateHasChanged);
                });
            };
        }
        catch { /* тихо, чтобы не мешать остальной странице */ }

        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        isLoading = true;
        StateHasChanged();
        await Task.WhenAll(LoadUsers(), LoadGroups());
        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadUsers()
    {
        try { users = await ADService.GetAllUsersAsync(); }
        catch (Exception ex)
        {
            users = new List<ADUser>();
            connectionStatus = $"Ошибка загрузки пользователей: {ex.Message}";
            connectionStatusOk = false;
        }
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(userSearch)) return;
        isLoading = true; StateHasChanged();
        try
        {
            users = await ADService.SearchUsersAsync(userSearch);
            connectionStatus = $"Поиск завершен. Найдено пользователей: {users.Count}";
            connectionStatusOk = true;
        }
        catch (Exception ex)
        {
            users = new List<ADUser>();
            connectionStatus = $"Ошибка поиска: {ex.Message}";
            connectionStatusOk = false;
        }
        isLoading = false; StateHasChanged();
    }

    private async Task LoadGroups()
    {
        try { groups = await ADService.GetAllGroupsAsync(); }
        catch (Exception ex)
        {
            groups = new List<ADGroup>();
            connectionStatus = $"Ошибка загрузки групп: {ex.Message}";
            connectionStatusOk = false;
        }
    }

    private async Task TestConnection()
    {
        isLoading = true; connectionStatus = string.Empty; StateHasChanged();
        var (success, message) = await ADService.TestConnectionAsync();
        connectionStatus = message; connectionStatusOk = success;
        isLoading = false; StateHasChanged();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(userSearch))
            await SearchUsers();
    }
}
