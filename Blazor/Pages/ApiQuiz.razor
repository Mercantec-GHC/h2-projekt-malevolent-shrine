@page "/api-quiz"
@inject IJSRuntime JS

<PageTitle>ASP.NET Core API Quiz</PageTitle>

<link href="css/jwt-learn.css" rel="stylesheet" />

<div class="jwt-page">
  <h1>ASP.NET Core Web API Quiz</h1>
  <p>
    Проверь свои знания по созданию REST API на ASP.NET Core. Контроллеры, маршрутизация, middleware, валидация и многое другое.
  </p>

  <div class="toc">
    <b>Разделы:</b>
    <a @onclick="@(() => ScrollToSection("controllers"))" style="cursor: pointer;">Контроллеры и маршрутизация</a>
    <a @onclick="@(() => ScrollToSection("middleware"))" style="cursor: pointer;">Middleware и Pipeline</a>
    <a @onclick="@(() => ScrollToSection("validation"))" style="cursor: pointer;">Валидация и DTO</a>
    <a @onclick="@(() => ScrollToSection("ef"))" style="cursor: pointer;">Entity Framework Core</a>
    <a @onclick="@(() => ScrollToSection("quiz"))" style="cursor: pointer;">Финальный квиз</a>
  </div>

  <h2 id="controllers">Контроллеры и маршрутизация</h2>
  <p>Основы создания API endpoints в ASP.NET Core.</p>
  <ul>
    <li><code>[ApiController]</code> — автоматическая валидация и 400 ответы</li>
    <li><code>[Route("api/[controller]")]</code> — шаблон маршрута</li>
    <li><code>[HttpGet]</code>, <code>[HttpPost]</code>, <code>[HttpPut]</code>, <code>[HttpDelete]</code></li>
  </ul>

  <h2 id="middleware">Middleware и Pipeline</h2>
  <p>Обработка HTTP-запросов через цепочку компонентов.</p>
  <ul>
    <li>UseRouting, UseAuthentication, UseAuthorization</li>
    <li>Порядок middleware критически важен</li>
    <li>Кастомные middleware для логирования, обработки ошибок</li>
  </ul>

  <h2 id="validation">Валидация и DTO</h2>
  <p>Проверка входных данных и паттерн Data Transfer Object.</p>
  <ul>
    <li>DataAnnotations: [Required], [StringLength], [EmailAddress]</li>
    <li>FluentValidation для сложной валидации</li>
    <li>DTO отделяют модели базы данных от API</li>
  </ul>

  <h2 id="ef">Entity Framework Core</h2>
  <p>ORM для работы с базами данных.</p>
  <ul>
    <li>DbContext — точка входа для работы с БД</li>
    <li>Миграции — версионирование схемы БД</li>
    <li>LINQ запросы и AsNoTracking для производительности</li>
  </ul>

  <h2 id="quiz">Финальный квиз</h2>
  <p>Проверь свои знания ASP.NET Core Web API!</p>
  <div class="quiz">
    @for (int i = 0; i < _questions.Count; i++)
    {
        var questionIndex = i;
        var q = _questions[questionIndex];
        <div class="q">
          <div class="qtext"><b>@(questionIndex+1).</b> @q.Text</div>
          <div class="opts">
            @for (int j = 0; j < q.Options.Count; j++)
            {
                var optionIndex = j;
                var opt = q.Options[optionIndex];
                var chosen = q.SelectedIndex == optionIndex;
                var cls = q.Answered
                    ? (optionIndex == q.CorrectIndex ? "opt correct" : (chosen ? "opt wrong" : "opt"))
                    : (chosen ? "opt chosen" : "opt");
                <button class="@cls" type="button" @onclick="@(() => SelectAnswer(questionIndex, optionIndex))" disabled="@q.Answered">@opt</button>
            }
          </div>
          @if (q.Answered)
          {
            var isCorrect = q.SelectedIndex == q.CorrectIndex;
            <div class="feedback @(isCorrect ? "correct" : "wrong")">
                @(isCorrect ? "Верно! ✓" : "Неверно. ✗")
            </div>
            @if (!string.IsNullOrWhiteSpace(q.Explanation))
            {
              <div class="explain"><b>Объяснение:</b> @q.Explanation</div>
            }
          }
        </div>
    }
    <div class="quiz-actions">
      <button class="btn" type="button" @onclick="ShowScore">Показать результат</button>
      <button class="btn ghost" type="button" @onclick="ResetQuiz">Сбросить</button>
    </div>
    @if (_scoreVisible)
    {
      <div class="score">Результат: <b>@CorrectCount</b> из <b>@_questions.Count</b> — @(ScoreComment)</div>
    }
  </div>

  <div class="nav-buttons">
    <a href="/" class="btn">На главную</a>
  </div>
</div>

@code {
  private async Task ScrollToSection(string sectionId)
  {
      try
      {
          await JS.InvokeVoidAsync("eval", $"document.getElementById('{sectionId}')?.scrollIntoView({{ behavior: 'smooth', block: 'start' }});");
      }
      catch (Exception ex)
      {
          Console.WriteLine($"[SCROLL] Error: {ex.Message}");
      }
  }

  class QuizQuestion
  {
      public string Text { get; set; } = string.Empty;
      public List<string> Options { get; set; } = new();
      public int CorrectIndex { get; set; }
      public string? Explanation { get; set; }
      public int? SelectedIndex { get; set; }
      public bool Answered { get; set; }
  }

  private List<QuizQuestion> _questions = new();
  private bool _scoreVisible;
  
  int CorrectCount => _questions.Count(q => q.Answered && q.SelectedIndex == q.CorrectIndex);
  string ScoreComment => CorrectCount switch
  {
      >= 8 => "API Мастер! 🚀",
      >= 6 => "Отлично знаешь API! 👍",
      >= 4 => "Хорошая база! 🙂",
      _ => "Стоит повторить материал 📚"
  };

  void SelectAnswer(int qi, int oi)
  {
      if (qi < 0 || qi >= _questions.Count) return;
      var q = _questions[qi];
      if (oi < 0 || oi >= q.Options.Count) return;
      q.SelectedIndex = oi;
      q.Answered = true;
      StateHasChanged();
  }

  void ShowScore()
  {
      _scoreVisible = true;
      StateHasChanged();
  }

  void ResetQuiz()
  {
      foreach (var q in _questions)
      {
          q.SelectedIndex = null;
          q.Answered = false;
      }
      _scoreVisible = false;
      StateHasChanged();
  }

  protected override void OnInitialized()
  {
      if (_questions.Count == 0)
      {
          _questions = BuildQuestions();
      }
  }

  List<QuizQuestion> BuildQuestions()
  {
      return new List<QuizQuestion>
      {
          Q("Какой атрибут делает класс API контроллером?",
            new[]{"[ApiController]", "[Controller]", "[RestController]"}, 0,
            "[ApiController] включает автоматическую валидацию ModelState и другие удобства."),
          
          Q("Какой HTTP-метод используется для создания ресурса?",
            new[]{"POST", "GET", "PUT"}, 0,
            "POST — стандарт для создания новых ресурсов."),
          
          Q("Что возвращает IActionResult?",
            new[]{"HTTP-ответ", "JSON объект", "Строку"}, 0,
            "IActionResult — интерфейс для различных типов HTTP-ответов (200, 404, 400 и т.д.)."),
          
          Q("Какой порядок middleware правильный?",
            new[]{"Routing → Authentication → Authorization", "Authorization → Authentication → Routing", "Authentication → Routing → Authorization"}, 0,
            "Сначала маршрутизация, затем аутентификация, затем авторизация."),
          
          Q("Что делает [FromBody] атрибут?",
            new[]{"Парсит JSON из тела запроса", "Читает query параметры", "Берет данные из route"}, 0,
            "[FromBody] указывает, что параметр должен быть десериализован из JSON тела запроса."),
          
          Q("Какой код возвращать при успешном создании?",
            new[]{"201 Created", "200 OK", "204 No Content"}, 0,
            "201 Created — стандартный код для успешно созданного ресурса."),
          
          Q("Что такое DTO?",
            new[]{"Data Transfer Object", "Database Transfer Object", "Dynamic Type Object"}, 0,
            "DTO — паттерн для передачи данных между слоями приложения."),
          
          Q("Для чего нужен AsNoTracking()?",
            new[]{"Повышение производительности read-only запросов", "Отключение логирования", "Удаление кэша"}, 0,
            "AsNoTracking отключает отслеживание изменений Entity Framework, ускоряя read-only операции."),
      };
  }

  static QuizQuestion Q(string text, string[] options, int correct, string? explanation = null)
  {
      return new QuizQuestion
      {
          Text = text,
          Options = options.ToList(),
          CorrectIndex = correct,
          Explanation = explanation
      };
  }
}

