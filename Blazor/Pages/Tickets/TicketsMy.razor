@page "/tickets/me"
@using Blazor.Models
@inject Blazor.Services.APIService Api
@inject NavigationManager Nav

<h1 class="site-title jp">Malevolent Shrine</h1>
<div class="jp">Ryomen Sukuna</div>
<p class="site-sub">My tickets (my requests)</p>

<div class="test-root">
  <div class="actions">
    <button class="btn btn-red" @onclick="() => showCreate = !showCreate">@((showCreate?"Hide":"Create ticket"))</button>
    <a class="btn btn-ghost" href="/tickets/role">Tickets for my role</a>
  </div>

  @if (showCreate)
  {
    <div class="book-card">
      <h3 class="page-title">New ticket</h3>
      <div class="profile-row">
        <label>Short title</label>
        <input class="form-control" @bind="create.Title" placeholder="For example: Air conditioner is noisy" />
      </div>
      <div class="profile-row">
        <label>Category</label>
        <select class="form-select" @bind="create.Category">
          <option value="@TicketCategory.Cleaning">Cleaning</option>
          <option value="@TicketCategory.Technical">Technical</option>
          <option value="@TicketCategory.General">General</option>
        </select>
      </div>
      <div class="profile-row">
        <label>Description (what happened)</label>
        <textarea class="form-control" @bind="create.Description" rows="4" placeholder="Describe the problem in simple words"></textarea>
      </div>
      <div class="actions">
        <button class="btn btn-red" @onclick="CreateAsync">Create</button>
        <button class="btn btn-ghost" @onclick="() => showCreate=false">Cancel</button>
      </div>
    </div>
  }

  @if (loading)
  {
    <Skeleton Lines="4" LineHeight="100px" />
  }
  else if (items.Count == 0)
  {
    <div class="empty">You have no tickets yet. Click "Create ticket".</div>
  }
  else
  {
    <div class="door-grid">
      @foreach (var t in items)
      {
        <div class="door-card" @onclick="@(() => Nav.NavigateTo(LinkTo(t)))">
          <div class="door-scene">
            <div class="door-frame"></div>
            <div class="door-leaf"></div>
            <div class="rune-wrap"><img class="rune-img" src="@($"img/runes/rune-{RuneFor(t.Category)}.svg")" alt="rune" /></div>
          </div>
          <div class="plaque">
            <div class="door-name">@t.Title</div>
            <div class="door-addr">Status: @t.Status | For role: @t.TargetRoleName</div>
          </div>
        </div>
      }
    </div>
  }
</div>

@code {
  bool loading = true;
  bool showCreate = false;
  List<TicketRead> items = new();
  TicketCreate create = new();

  protected override async Task OnInitializedAsync()
  {
    await LoadAsync();
  }

  async Task LoadAsync()
  {
    loading = true;
    items = await Api.GetMyTicketsAsync();
    loading = false;
    StateHasChanged();
  }

  async Task CreateAsync()
  {
    if (string.IsNullOrWhiteSpace(create.Title) || string.IsNullOrWhiteSpace(create.Description))
      return;
    var res = await Api.CreateTicketAsync(create);
    if (res != null)
    {
      showCreate = false;
      create = new();
      await LoadAsync();
      Nav.NavigateTo($"/tickets/chat/{res.Id}");
    }
  }

  string LinkTo(TicketRead t) => $"/tickets/chat/{t.Id}";

  string RuneFor(TicketCategory cat) => cat switch
  {
    TicketCategory.Cleaning => "clean",
    TicketCategory.Technical => "tech",
    _ => "general"
  };
}
