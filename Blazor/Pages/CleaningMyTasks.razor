@page "/my-tasks"
@inject IJSRuntime JS
@inject Blazor.Services.APIService Api

<h4>My cleaning tasks</h4>

@if (error != null)
{
    <div class="alert alert-danger">@error</div>
}

@if (tasks == null)
{
    <div>Loading...</div>
}
else if (tasks.Count == 0)
{
    <div class="alert alert-info">No tasks yet.</div>
}
else
{
    <ul class="list-group">
        @foreach (var t in tasks)
        {
            <li class="list-group-item">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <div class="fw-bold">@t.Title</div>
                        @if (!string.IsNullOrWhiteSpace(t.Description))
                        {
                            <div class="text-muted">@t.Description</div>
                        }
                        <div class="small">Room: @(t.RoomId?.ToString() ?? "—")</div>
                        <div class="small">Due: @(t.DueDate?.ToString("yyyy-MM-dd") ?? "—")</div>
                        <div class="small">Status: <span class="badge bg-secondary">@t.Status</span></div>
                    </div>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary btn-sm" disabled="@(busyId==t.Id)" @onclick="(() => UpdateStatus(t.Id, Blazor.Services.APIService.CleaningTaskStatus.InProgress))">In progress</button>
                        <button class="btn btn-success btn-sm" disabled="@(busyId==t.Id)" @onclick="(() => UpdateStatus(t.Id, Blazor.Services.APIService.CleaningTaskStatus.Done))">Done</button>
                    </div>
                </div>
            </li>
        }
    </ul>
}

@code {
    private List<Blazor.Services.APIService.CleaningTaskReadDto>? tasks;
    private string? error;
    private int? busyId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");
            if (string.IsNullOrWhiteSpace(token)) { error = "Login required"; return; }
            tasks = await Api.GetMyCleaningTasksAsync(token);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private async Task UpdateStatus(int id, Blazor.Services.APIService.CleaningTaskStatus status)
    {
        try
        {
            busyId = id;
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "access_token");
            if (string.IsNullOrWhiteSpace(token)) { error = "Login required"; return; }
            var ok = await Api.UpdateMyCleaningTaskStatusAsync(id, status, token);
            if (ok && tasks != null)
            {
                var found = tasks.FirstOrDefault(x => x.Id == id);
                if (found != null) found.Status = status;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally { busyId = null; }
    }
}
