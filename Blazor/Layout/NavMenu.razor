@inject IJSRuntime JSRuntime

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">Malevolent Shrine</a>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable">
    <nav class="nav-wrapper">
        <div class="nav-items">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <i class="bi bi-house-door-fill"></i> Home
                </NavLink>


            </div>
        </div>

        <div class="bottom-nav">
            @if (!isLoggedIn)
            {
                <NavLink class="nav-link login" href="login">
                    <i class="bi bi-box-arrow-in-right"></i> Login
                </NavLink>
                <NavLink class="nav-link register" href="register">
                    <i class="bi bi-person-plus-fill"></i> Register
                </NavLink>
            }
            else
            {
                <NavLink class="nav-link register" href="profile">
                    <i class="bi bi-person-circle"></i> Profile
                </NavLink>
            }
        </div>
    </nav>
</div>


@code {
    [Parameter] public EventCallback OnToggleSidebar { get; set; }
    [Parameter] public bool IsSidebarCollapsed { get; set; }

    public bool isLoggedIn = false;

    private string? NavMenuCssClass => IsSidebarCollapsed ? "collapse" : "open";

    private Task HandleToggle() => OnToggleSidebar.InvokeAsync(null);

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("auth.getToken");
        isLoggedIn = !string.IsNullOrWhiteSpace(token);
        StateHasChanged();
    }
}
