<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/API/Data/AppDBContext.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/API/Data/AppDBContext.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using API.Models;&#10;&#10;namespace API.Data&#10;{&#10;    public class AppDBContext : DbContext&#10;    {&#10;        public AppDBContext(DbContextOptions&lt;AppDBContext&gt; options) : base(options)&#10;        {&#10;        }&#10;&#10;        public DbSet&lt;User&gt; Users { get; set; }&#10;        public DbSet&lt;Role&gt; Roles { get; set; }&#10;&#10;        protected override void OnModelCreating(ModelBuilder modelBuilder)&#10;        {&#10;            // настраиваем связь между User и Role&#10;            modelBuilder.Entity&lt;User&gt;()&#10;                .HasOne(u =&gt; u.Role)&#10;                .WithMany()&#10;                .HasForeignKey(u =&gt; u.RoleId)&#10;                .OnDelete(DeleteBehavior.Restrict);&#10;&#10;            // добавить эти роли в базу данных&#10;            modelBuilder.Entity&lt;Role&gt;().HasData(&#10;                new Role { Id = 1, Name = &quot;Admin&quot;, CreatedAt = seedDate, UpdatedAt = seedDate },&#10;                new Role { Id = 2, Name = &quot;Receptionist&quot;, CreatedAt = seedDate, UpdatedAt = seedDate },&#10;                new Role { Id = 3, Name = &quot;Rengøring&quot;, CreatedAt = seedDate, UpdatedAt = seedDate },&#10;                new Role { Id = 4, Name = &quot;Kunde&quot;, CreatedAt = seedDate, UpdatedAt = seedDate },&#10;                new Role { Id = 5, Name = &quot;InfiniteVoid&quot;, CreatedAt = seedDate, UpdatedAt = seedDate }&#10;            );&#10;&#10;            //  чтобы он сам ставил текущее время, HasDefaultValueSql - автоматически заполняет поле&#10;            // текущей датой и временем при добавлении новой записи&#10;            modelBuilder.Entity&lt;Role&gt;().Property(r =&gt; r.CreatedAt).HasDefaultValueSql(&quot;now()&quot;);&#10;            modelBuilder.Entity&lt;Role&gt;().Property(r =&gt; r.UpdatedAt).HasDefaultValueSql(&quot;now()&quot;);&#10;            modelBuilder.Entity&lt;User&gt;().Property(u =&gt; u.CreatedAt).HasDefaultValueSql(&quot;now()&quot;);&#10;            modelBuilder.Entity&lt;User&gt;().Property(u =&gt; u.UpdatedAt).HasDefaultValueSql(&quot;now()&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using API.Models;&#10;&#10;namespace API.Data&#10;{&#10;    public class AppDBContext : DbContext&#10;    {&#10;        public AppDBContext(DbContextOptions&lt;AppDBContext&gt; options) : base(options)&#10;        {&#10;        }&#10;&#10;        public DbSet&lt;User&gt; Users { get; set; }&#10;        public DbSet&lt;Role&gt; Roles { get; set; }&#10;&#10;        protected override void OnModelCreating(ModelBuilder modelBuilder)&#10;        {&#10;            // Статическая дата для seed данных&#10;            var seedDate = new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Utc);&#10;&#10;            // настраиваем связь между User и Role&#10;            modelBuilder.Entity&lt;User&gt;()&#10;                .HasOne(u =&gt; u.Role)&#10;                .WithMany()&#10;                .HasForeignKey(u =&gt; u.RoleId)&#10;                .OnDelete(DeleteBehavior.Restrict);&#10;&#10;            // добавить эти роли в базу данных&#10;            modelBuilder.Entity&lt;Role&gt;().HasData(&#10;                new Role { Id = 1, Name = &quot;Admin&quot;, CreatedAt = seedDate, UpdatedAt = seedDate },&#10;                new Role { Id = 2, Name = &quot;Receptionist&quot;, CreatedAt = seedDate, UpdatedAt = seedDate },&#10;                new Role { Id = 3, Name = &quot;Rengøring&quot;, CreatedAt = seedDate, UpdatedAt = seedDate },&#10;                new Role { Id = 4, Name = &quot;Kunde&quot;, CreatedAt = seedDate, UpdatedAt = seedDate },&#10;                new Role { Id = 5, Name = &quot;InfiniteVoid&quot;, CreatedAt = seedDate, UpdatedAt = seedDate }&#10;            );&#10;&#10;            //  чтобы он сам ставил текущее время, HasDefaultValueSql - автоматически заполняет поле&#10;            // текущей датой и временем при добавлении новой записи&#10;            modelBuilder.Entity&lt;Role&gt;().Property(r =&gt; r.CreatedAt).HasDefaultValueSql(&quot;now()&quot;);&#10;            modelBuilder.Entity&lt;Role&gt;().Property(r =&gt; r.UpdatedAt).HasDefaultValueSql(&quot;now()&quot;);&#10;            modelBuilder.Entity&lt;User&gt;().Property(u =&gt; u.CreatedAt).HasDefaultValueSql(&quot;now()&quot;);&#10;            modelBuilder.Entity&lt;User&gt;().Property(u =&gt; u.UpdatedAt).HasDefaultValueSql(&quot;now()&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>